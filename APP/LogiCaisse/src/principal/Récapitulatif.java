/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package principal;

import com.formdev.flatlaf.FlatLightLaf;
import com.mysql.jdbc.exceptions.jdbc4.CommunicationsException;
import static com.qoppa.b.d.u.y;
import com.qoppa.pdfWriter.PDFDocument;
import com.qoppa.pdfWriter.PDFPage;
import java.awt.FlowLayout;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.border.Border;
import static jdk.nashorn.internal.objects.NativeMath.round;

/**
 *
 * @author etien
 */
public class Récapitulatif extends javax.swing.JFrame {

    /**
     * Creates new form Récapitulatif
     */
    JPanel page = new JPanel(new FlowLayout());
    JLabel CA_TTC;
    JLabel CA_HT;
    JLabel nbArticles;
    JLabel nb_Clients_Diff;
    JLabel nb_Clients;
    JLabel moyenne_Quantité;
    JLabel moyenne_Valeur;

    JLabel total_Remises;
    JLabel moyenne_Remises;

    JLabel moyen_De_Paiement;
    
    private static DecimalFormat df = new DecimalFormat("0.00");
    
    private static Connection conn = Bdd.coBdd(); //Instanciation de la variable de connexion à la base de données
    public Récapitulatif() {
        initComponents();
        URL iconURL = getClass().getResource(Données.getUrl_Logo());
        ImageIcon icon = new ImageIcon(iconURL);
        this.setIconImage(icon.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        choixPeriode = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edition récapitulatif");
        setResizable(false);

        choixPeriode.add(jRadioButton2);
        jRadioButton2.setText("Journée");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        jRadioButton2.setActionCommand("journee");

        choixPeriode.add(jRadioButton3);
        jRadioButton3.setText("Mois");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });
        jRadioButton3.setActionCommand("mois");

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel1.setText("Edition récapitulatifs des caisses");

        choixPeriode.add(jRadioButton4);
        jRadioButton4.setText("Semaine");
        jRadioButton4.setActionCommand("semaine");

        choixPeriode.add(jRadioButton5);
        jRadioButton5.setText("Année");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });
        jRadioButton5.setActionCommand("annee");

        choixPeriode.add(jRadioButton6);
        jRadioButton6.setText("Période libre");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });
        jRadioButton6.setActionCommand("libre");

        jButton1.setText("Imprimer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("du");

        jLabel3.setText("au");

        jDateChooser1.setDateFormatString("dd/MM/yyyy");

        jDateChooser2.setDateFormatString("dd/MM/yyyy");

        jLabel4.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 51));
        jLabel4.setText("Veuillez choisir les deux dates !");
        jLabel4.setVisible(false);

        jLabel5.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 51, 51));
        jLabel5.setText("Veuillez choisir une option !");
        jLabel5.setVisible(false);

        jLabel6.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 51, 51));
        jLabel6.setText("Intervalle invalide");
        jLabel6.setVisible(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jRadioButton3)
                                .addComponent(jRadioButton2)
                                .addComponent(jRadioButton5)
                                .addComponent(jRadioButton4)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jRadioButton6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel4)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1)
                                    .addGap(16, 16, 16))))))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton2)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton4)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton3)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton5)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jRadioButton6)
                        .addComponent(jLabel2))
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        page.removeAll();
        
        CA_TTC=null;
        CA_HT=null;
        nbArticles=null;
        nb_Clients_Diff=null;
        nb_Clients=null;
        moyenne_Quantité=null;
        moyenne_Valeur=null;

        total_Remises=null;
        moyenne_Remises=null;

        moyen_De_Paiement=null;
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        
        Date date;
        Calendar cal = Calendar.getInstance();
        
        int year = Calendar.getInstance().get(Calendar.YEAR);
        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;
        
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy à HH:mm");  
        LocalDateTime now = LocalDateTime.now();  
        
        String sql="";
        String recapDuAu="";
        String recapFaitLe="Édition faite le "+dtf.format(now);
        System.out.println(recapFaitLe);
        boolean validChoix = true;
        if(choixPeriode.getSelection()==null) {
            jLabel5.setVisible(true);
            validChoix=false;
        } else if(choixPeriode.getSelection().getActionCommand().equals("libre")) {
            if(jDateChooser1.getDate()==null || jDateChooser2.getDate()==null) {
                jLabel4.setVisible(true);
                jLabel5.setVisible(false);
                jLabel6.setVisible(false);
                validChoix=false;
            } else try {
                if((sdf.parse(sdf.format(jDateChooser2.getDate())).getTime()) < (sdf.parse(sdf.format(jDateChooser1.getDate())).getTime())) {
                    jLabel4.setVisible(false);
                    jLabel5.setVisible(false);
                    jLabel6.setVisible(true);
                    validChoix=false;
                } else {
                    jLabel5.setVisible(false);
                    jLabel6.setVisible(false);
                    jLabel4.setVisible(false);
                    validChoix=true;
                }
            } catch (ParseException ex) {
                Logger.getLogger(Récapitulatif.class.getName()).log(Level.SEVERE, null, ex);
            }
        } if(validChoix) {
            jLabel5.setVisible(false);
            String choix = choixPeriode.getSelection().getActionCommand(); 
            System.out.println("choix = "+choix);

            sql="SELECT SUM(Article.A_PrixDeVente*LigneTDC.LTDC_Quantite-LigneTDC.LTDC_RemiseLigne) as TTC,SUM(Article.A_PrixDeVente*LigneTDC.LTDC_Quantite-Article.A_PrixDeVente*TVA_Taux-LigneTDC.LTDC_RemiseLigne) as HT FROM Article, TicketDeCaisse, LigneTDC,TVA WHERE TicketDeCaisse.TDC_Date BETWEEN ? AND ? AND TVA_idTVA=idTVA AND LigneTDC.TicketDeCaisse_idTicketDeCaisse=TicketDeCaisse.idTicketDeCaisse AND LigneTDC.Article_idArticle=Article.idArticle";

            String date1 ="";
            String date2 ="";
            System.out.println(sql);
            try (PreparedStatement state = conn.prepareStatement(sql)) {

                switch(choix) 
                { 
                    case "journee": 
                        String todayDate = sdf.format(new Date()); 
                        recapDuAu="Récapitulatif des caisses du "+todayDate;
                        date1=todayDate;
                        date2=todayDate;
                        System.out.println(todayDate);
                        System.out.println(sql);
                        break;
                    case "semaine": 

                        cal.set(Calendar.HOUR_OF_DAY, 0); // ! clear would not reset the hour of day !
                        cal.clear(Calendar.MINUTE);
                        cal.clear(Calendar.SECOND);
                        cal.clear(Calendar.MILLISECOND);

                        cal.set(Calendar.DAY_OF_WEEK, cal.getFirstDayOfWeek());
                        cal.setTimeInMillis(cal.getTimeInMillis());
                        int debutSemaine = (cal.get(Calendar.DAY_OF_MONTH));
                        String dateDebutSemaine = year+"-"+month+"-"+debutSemaine;

                        cal.add(Calendar.WEEK_OF_YEAR, 1);
                        cal.setTimeInMillis(cal.getTimeInMillis());
                        int finSemaine = (cal.get(Calendar.DAY_OF_MONTH)-1);
                        String dateFinSemaine = year+"-"+month+"-"+finSemaine;
                        System.out.println(sql);
                        date1=dateDebutSemaine;
                        date2=dateFinSemaine;
                        recapDuAu="Récapitulatif des caisses du "+debutSemaine+"/"+month+"/"+year+" au "+finSemaine+"/"+month+"/"+year;

                        break; 
                    case "mois": 
                        cal=null;
                        cal=Calendar.getInstance();
                        int debutMois = cal.getActualMinimum(Calendar.DATE);
                        String dateDebutMois = year+"-"+month+"-"+debutMois;
                        System.out.println(dateDebutMois);
                        int finMois = cal.getActualMaximum(Calendar.DATE);
                        String dateFinMois = year+"-"+month+"-"+finMois;
                        System.out.println(dateFinMois);
                        System.out.println(sql);
                        date1=dateDebutMois;
                        date2=dateFinMois;
                        recapDuAu="Récapitulatif des caisses du "+debutMois+"/"+month+"/"+year+" au "+finMois+"/"+month+"/"+year;

                        break; 
                    case "annee": 
                        String dateDebutAnnee = year+"-01-01";
                        String dateFinAnnee = year+"-12-31";
                        System.out.println(dateDebutAnnee);
                        System.out.println(dateFinAnnee);
                        System.out.println(sql);
                        date1=dateDebutAnnee;
                        date2=dateFinAnnee;
                        recapDuAu="Récapitulatif des caisses du 01/01/"+year+" au 31/12/"+year;
                        break; 
                    case "libre": 

                            String dateString1 = sdf.format(jDateChooser1.getDate());
                            System.out.println(dateString1);

                            String dateString2 = sdf.format(jDateChooser2.getDate());
                            System.out.println(dateString2);
                            

                            System.out.println(sql);
                            date1=dateString1;
                            date2=dateString2;
                            sdf = new SimpleDateFormat("dd/MM/yyyy");
                            recapDuAu="Récapitulatif des caisses du "+sdf.format(jDateChooser1.getDate())+" au "+sdf.format(jDateChooser2.getDate());
                        


                        break; 
                    default: 
                        System.out.println("no match"); 
                        sql="";
                } 

                

                state.setString(1, date1);
                state.setString(2, date2);
                ResultSet result = state.executeQuery();
                result.next();
                CA_TTC = new JLabel("Total CA TTC : " + df.format(result.getDouble("TTC")) + " €");
                CA_HT = new JLabel("Total CA HT : " + df.format(result.getDouble("HT")) + " €");
                
                System.out.println("CA TTC = "+result.getInt("TTC"));
                System.out.println("CA HT = "+result.getInt("HT"));
                result.close();
                state.close();
            } catch (CommunicationsException e) {
                Bdd.lostCO(e);
            } catch (SQLException ex) {
                Logger.getLogger(ConnexionApp.class.getName()).log(Level.SEVERE, null, ex);
            } 

            System.out.println("date 1 = "+date1);
            System.out.println("date2 = "+date2);



            //requete pour recup le nb d'articles
            sql="SELECT SUM(LTDC_Quantite) as nbArticles FROM Article, TicketDeCaisse, LigneTDC,TVA WHERE TicketDeCaisse.TDC_Date BETWEEN ? AND ? AND TVA_idTVA=idTVA AND LigneTDC.TicketDeCaisse_idTicketDeCaisse=TicketDeCaisse.idTicketDeCaisse AND LigneTDC.Article_idArticle=Article.idArticle";

            try (PreparedStatement state = conn.prepareStatement(sql)) {

                state.setString(1, date1);
                state.setString(2, date2);
                ResultSet result = state.executeQuery();
                result.next();
                
                nbArticles = new JLabel("Nombre d'articles vendus : " + result.getInt("nbArticles"));

                System.out.println("nb articles = "+result.getInt("nbArticles"));
                result.close();
                state.close();

            } catch (CommunicationsException e) {
                Bdd.lostCO(e);
            } catch (SQLException ex) {
                Logger.getLogger(ConnexionApp.class.getName()).log(Level.SEVERE, null, ex);
            }


            //requete pour recup le nb de clients différents 
            sql="SELECT DISTINCT TicketDeCaisse.Client_idClient FROM TicketDeCaisse WHERE TicketDeCaisse.TDC_Date BETWEEN ? AND ?";

            try (PreparedStatement state = conn.prepareStatement(sql)) {

                state.setString(1, date1);
                state.setString(2, date2);
                ResultSet result = state.executeQuery();
                int nb_clients_Diff=0;
                while(result.next()) {
                    nb_clients_Diff++;
                }
                nb_Clients_Diff = new JLabel("Nombre de clients différents : " + nb_clients_Diff);
                System.out.println("nb clients différents = "+nb_Clients_Diff);
                result.close();
                state.close();

            } catch (CommunicationsException e) {
                Bdd.lostCO(e);
            } catch (SQLException ex) {
                Logger.getLogger(ConnexionApp.class.getName()).log(Level.SEVERE, null, ex);
            }


            //requete pour recup le nb de clients / tickets de caisse 
            sql="SELECT count(TicketDeCaisse.idTicketDeCaisse) as nbTicketCaisse FROM TicketDeCaisse WHERE TicketDeCaisse.TDC_Date BETWEEN ? AND ?";

            try (PreparedStatement state = conn.prepareStatement(sql)) {

                state.setString(1, date1);
                state.setString(2, date2);
                ResultSet result = state.executeQuery();
                result.next();
                nb_Clients = new JLabel("Nombre de clients : " + result.getInt("nbTicketCaisse"));
                System.out.println("nb tickets de caisse = "+result.getInt("nbTicketCaisse"));
                result.close();
                state.close();

            } catch (CommunicationsException e) {
                Bdd.lostCO(e);
            } catch (SQLException ex) {
                Logger.getLogger(ConnexionApp.class.getName()).log(Level.SEVERE, null, ex);
            }


            //requete pour recup le TOTAL QUANTITE ET VALEUR POUR CHAQUE TICKET DE CAISSE
            sql="SELECT SUM(LigneTDC.LTDC_Quantite) as sommeQuantite, SUM(LigneTDC.LTDC_Quantite*Article.A_PrixDeVente) as sommePrix FROM `LigneTDC`, TicketDeCaisse, Article WHERE LigneTDC.TicketDeCaisse_idTicketDeCaisse=TicketDeCaisse.idTicketDeCaisse and LigneTDC.Article_idArticle=Article.idArticle and TicketDeCaisse.TDC_Date BETWEEN ? AND ? group by LigneTDC.TicketDeCaisse_idTicketDeCaisse";

            try (PreparedStatement state = conn.prepareStatement(sql)) {

                state.setString(1, date1);
                state.setString(2, date2);
                ResultSet result = state.executeQuery();
                double moyenne_quantité = 0;
                double moyenne_valeur = 0;
                double compteur = 0;
                while (result.next()) {
                    moyenne_quantité+=result.getInt("sommeQuantite");
                    moyenne_valeur+=result.getInt("sommePrix");
                    compteur++;
                }

                moyenne_quantité=moyenne_quantité/compteur;
                moyenne_valeur=moyenne_valeur/compteur;
                moyenne_Quantité = new JLabel("Panier moyen en quantité : " + df.format(moyenne_quantité));
                moyenne_Valeur = new JLabel("Panier moyen en valeur : " + df.format(moyenne_valeur) + " €");
                System.out.println("panier moyen en quantité = "+moyenne_quantité);
                System.out.println("panier moyen en valeur = "+moyenne_valeur);

                result.close();
                state.close();

            } catch (CommunicationsException e) {
                Bdd.lostCO(e);
            } catch (SQLException ex) {
                Logger.getLogger(ConnexionApp.class.getName()).log(Level.SEVERE, null, ex);
            }


            //requete pour recup le TOTAL ET LA MOYENNE DES REMISES 
            sql="SELECT SUM(LigneTDC.LTDC_RemiseLigne) as totalRemises, AVG(LigneTDC.LTDC_RemiseLigne) as moyenneRemises FROM `LigneTDC`, TicketDeCaisse, Article WHERE LigneTDC.TicketDeCaisse_idTicketDeCaisse=TicketDeCaisse.idTicketDeCaisse and LigneTDC.Article_idArticle=Article.idArticle and TicketDeCaisse.TDC_Date BETWEEN ? and ?";

            try (PreparedStatement state = conn.prepareStatement(sql)) {

                state.setString(1, date1);
                state.setString(2, date2);
                ResultSet result = state.executeQuery();
                result.next();
                
                total_Remises = new JLabel("Total remises : " + df.format(result.getFloat("totalRemises")) + " €");
                moyenne_Remises = new JLabel("Moyenne remises : " + df.format(result.getFloat("moyenneRemises")) + " €");

                System.out.println("total remises = "+total_Remises);
                System.out.println("moyenne remises = "+moyenne_Remises);

                result.close();
                state.close();

            } catch (CommunicationsException e) {
                Bdd.lostCO(e);
            } catch (SQLException ex) {
                Logger.getLogger(ConnexionApp.class.getName()).log(Level.SEVERE, null, ex);
            }

            
            page.setSize(1190, 1684);
            page.setBackground(new java.awt.Color(255, 255, 255));
           
            
            PDFDocument pdfDoc = new PDFDocument();
            
            JPanel container = new javax.swing.JPanel();
            container.setBackground(new java.awt.Color(255, 255, 255));
            container.setSize(1250, 200);
            container.setVisible(true);
            Border blackline = BorderFactory.createLineBorder(new java.awt.Color(127, 127, 127));  
            container.setBorder(blackline);
            //requete pour recup le TOTAL TTC et LE NB DE PANIERS PAR MOYEN DE PAIEMENT
            sql="SELECT MoyenDePaiment.MDP_Type,SUM(Article.A_PrixDeVente*LigneTDC.LTDC_Quantite-LigneTDC.LTDC_RemiseLigne) as TTC,SUM(Article.A_PrixDeVente*LigneTDC.LTDC_Quantite-Article.A_PrixDeVente*TVA_Taux-LigneTDC.LTDC_RemiseLigne) as HT, count(LigneTDC.TicketDeCaisse_idTicketDeCaisse) as nbTickets FROM Article, TicketDeCaisse, LigneTDC,TVA, MoyenDePaiment WHERE TicketDeCaisse.TDC_Date BETWEEN ? and ? AND TVA_idTVA=idTVA AND LigneTDC.TicketDeCaisse_idTicketDeCaisse=TicketDeCaisse.idTicketDeCaisse AND LigneTDC.Article_idArticle=Article.idArticle and TicketDeCaisse.MoyenDePaiment_idMoyenDePaiment=MoyenDePaiment.idMoyenDePaiment group by MoyenDePaiment.MDP_Type";

            try (PreparedStatement state = conn.prepareStatement(sql)) {

                state.setString(1, date1);
                state.setString(2, date2);
                ResultSet result = state.executeQuery();

                //Map<String, Double> moyens_De_Paiement = new HashMap<String, Double>();
                int offset = 860;
                while(result.next()) {
                    

//                    System.out.println("totalTTC = "+result.getDouble("TTC")); 
//                    System.out.println("totalHT = "+result.getDouble("HT")); 
//                    System.out.println("nbTickets = "+result.getInt("nbTickets")); 
                    moyen_De_Paiement = new JLabel(result.getString("MDP_Type"));
                    setJlabel(moyen_De_Paiement, 120, offset,16.0f, page);
                    moyen_De_Paiement=null;
                    offset+=30;
                    
                    moyen_De_Paiement = new JLabel("Ventes TTC : "+df.format(result.getDouble("TTC")) + " €");
                    setJlabel(moyen_De_Paiement, 150, offset,16.0f, page);
                    moyen_De_Paiement=null;
                    
                    offset+=30;
                    
                    moyen_De_Paiement = new JLabel("Ventes HT : "+df.format(result.getDouble("HT")) + " €");
                    setJlabel(moyen_De_Paiement, 150, offset,16.0f, page);
                    moyen_De_Paiement=null;
                    
                    offset+=30;
                    
                    moyen_De_Paiement = new JLabel("Nombre de paiements : "+Integer.toString(result.getInt("nbTickets")));
                    setJlabel(moyen_De_Paiement, 150, offset,16.0f, page);
                    moyen_De_Paiement=null;
                    
                    offset+=30;
                }

                //moyens_De_Paiement.forEach((key, value) -> System.out.println(key + ":" + value));

                result.close();
                state.close();

            } catch (CommunicationsException e) {
                Bdd.lostCO(e);
            } catch (SQLException ex) {
                Logger.getLogger(ConnexionApp.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            
            
            JLabel Logo = new javax.swing.JLabel();
            Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logo_recap.png")));
            Logo.setVisible(true);
            Logo.setSize(175, 96);
            Logo.setLocation(60, 50);
            container.add(Logo);
            container.revalidate();
            container.repaint();

            
            
            JLabel recapDu = new JLabel(recapDuAu);
            setJlabel(recapDu, 320, 20,22.0f, container);
            
            
            JLabel faitLe = new JLabel(recapFaitLe);
            setJlabel(faitLe, 320, 80,22.0f, container);
            
            JLabel users = new JLabel("Utilisateur(s) : Tous");
            setJlabel(users, 320, 140,22.0f, container);
           
            
            JLabel titreCA = new JLabel("Chiffre d'affaires");
            setJlabel(titreCA, 60, 300,24.0f, page);
            
            setJlabel(CA_TTC, 120, 350,16.0f, page);
            setJlabel(CA_HT, 120, 380,16.0f, page);
            setJlabel(nbArticles, 120, 410,16.0f, page);
            
            JLabel titreClients = new JLabel("Clients");
            setJlabel(titreClients, 60, 460,24.0f, page);
            
            setJlabel(nb_Clients_Diff, 120, 500,16.0f, page);
            setJlabel(nb_Clients, 120, 530,16.0f, page);
            
            JLabel titrePanier = new JLabel("Panier");
            setJlabel(titrePanier, 60, 580,24.0f, page);
            
            setJlabel(moyenne_Quantité, 120, 620,16.0f, page);
            setJlabel(moyenne_Valeur, 120, 650,16.0f, page);
            
            JLabel titreRemises = new JLabel("Remises");
            setJlabel(titreRemises, 60, 700,24.0f, page);
            
            setJlabel(total_Remises, 120, 740,16.0f, page);
            setJlabel(moyenne_Remises, 120, 770,16.0f, page);
            
            JLabel titreMDP = new JLabel("Moyens de paiement");
            setJlabel(titreMDP, 60, 820,24.0f, page);
            
            
            
            page.setVisible(true);
            page.add(container);
            
            Paper p = new Paper();
            p.setSize(8.25 * 72, 11.75 * 72);
            p.setImageableArea(0, 0, 8.25 * 72, 11.75 * 72);
            PageFormat pf = new PageFormat();
            pf.setPaper(p);
            // Create page
            PDFPage pagePDF = pdfDoc.createPage(pf);

            // Add page to document
            pdfDoc.addPage(pagePDF);
            // get graphics object from the page
            Graphics2D g2d = pagePDF.createGraphics();
            g2d.scale(0.5, 0.5);
            // myComponent being a JComponent showing on the screen
            page.print(g2d);


            // get an output file name
            File outFile = new File("temp/recapTDC.pdf");

            // save document
            try {
                pdfDoc.saveDocument(outFile.getAbsolutePath());
            } catch (IOException ex) {
                Logger.getLogger(Etiquettes.class.getName()).log(Level.SEVERE, null, ex);
            }

            extend.ouvrirPDF.ouvrirDocPdf("temp/recapTDC.pdf");
            
            dispose();

        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private static void setJlabel(JLabel label, int offsetx, int offsety,float fontSize, JPanel container){      
        label.setVisible(true);
        label.setSize(1000, 50);
        label.setLocation(offsetx, offsety);
        label.setFont(label.getFont().deriveFont(fontSize));
        container.add(label);
        container.revalidate();
        container.repaint();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        if(Données.getDUA_Encaissement()== 1){
            
            try {
                UIManager.setLookAndFeel( new FlatLightLaf() );
            } catch( Exception ex ) {
                System.err.println( "Failed to initialize LaF" );
            }

            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new Récapitulatif().setVisible(true);
                }
            });
        }else{
            ViolationDroit.main(null);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup choixPeriode;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    // End of variables declaration//GEN-END:variables
}
